# All samples to processes 
TISSUE = ["SP", "RO", "LE", "IS"]
REPS = ["1", "2", "3"]

rule trim_reads:
    output:
        read_1="{outdir}/trimmed_{sample}_1P.fastq.gz",
        read_2="{outdir}/trimmed_{sample}_2P.fastq.gz",
        read_1_unpaired="{outdir}/trimmed_{sample}_1U.fastq.gz",
        read_2_unpaired="{outdir}/trimmed_{sample}_2U.fastq.gz"
    input: 
        read_1 = "../input_data/cage_data/Fastq_R1/{sample}_R1.fastq.gz",
        read_2 = "../input_data/cage_data/Fastq_R2/{sample}_R2.fastq.gz",
        solexa = "../input_data/solexa_sequencing_primers.fa",
    threads: 16 #Â Adjust later or maybe put in config file?
    log: "{outdir}/logs/{sample}.trim_reads.log"
    shell: 
        r"""
        source package 50fcf79b-73a3-4f94-9553-5ed917823423;
        trimmomatic PE -threads {threads} {input.read_1} {input.read_2} \
        {output.read_1} {output.read_1_unpaired} {output.read_2} {output.read_2_unpaired} \
        ILLUMINACLIP:{input.solexa}:2:30:12 SLIDINGWINDOW:4:20 MINLEN:20 AVGQUAL:20 
        """

rule trim_count_reads:
    output: "{outdir}/{myfile}.trim.count"
    input:  "{outdir}/{myfile}.fastq.gz"
    shell:
        "echo {wildcards.myfile}: $(( $(wc -l <{input}) / 4 )) > {output}"

rule untrim_count_reads:
    output: "{outdir}/{sample}_R{num}.untrim.count"
    input:  "../input_data/cage_data/Fastq_R{num}/{sample}_R{num}.fastq.gz"
    shell:
        "echo {wildcards.sample} $(( $(wc -l <{input}) / 4 )) > {output}"



rule all_counts:
    output:
        untrimmed = "{outdir}/untrimmed_counts_concatenated.txt",
        trimmed   = "{outdir}/trimmed_counts_concatenated.txt",
    input:
        untrimmed = expand("{{outdir}}/{tissue}{rep}_R{read}.untrim.count", tissue = TISSUE, rep = REPS, read = ["1", "2"]),
        trimmed = expand("{{outdir}}/trimmed_{tissue}{rep}_{type}.trim.count", tissue = TISSUE, rep = REPS, type = ["1P", "2P", "1U", "2U"])
    
    shell:
        """
        cat {input.untrimmed} > {output.untrimmed} ; cat {input.trimmed} > {output.trimmed}
        """



rule fastqc:
    input:  "{outdir}/{myfile}.fq.gz"
    output:
        html="{outdir}/{myfile}_fastqc.html",
        zip="{outdir}/{myfile}_fastqc.zip"
    threads: 2 # adjust as needed
    log: "{outdir}/logs/fastqc.{myfile}.log"
    shell:
        """
        # Define memory per thread
        mem_mb=$(python -c 'print({{int({resources.mem_mb} / {threads})}})')

        # Function to get basename without extension
        basename_without_ext() {{
            base=$(basename "$1")
            base=${{base//.gz/}}
            base=${{base//.fastq
            /}}
            base=${{base//.fq/}}
            echo "$base"
        }}
        # Create temporary directory
        tempdir=$(mktemp -d)
        trap "rm -rf $tempdir" EXIT

        fastqc --threads {threads} --memory $mem_mb {params.extra} --outdir $tempdir {input} &> {log}

        # Move outputs to proper location
        output_base=$(basename_without_ext {input})
        html_path="$tempdir/${{output_base}}_fastqc.html"
        zip_path="$tempdir/${{output_base}}_fastqc.zip"
        mv $html_path {output.html}
        mv $zip_path {output.zip}
        """


rule star_index:
    input:
        fasta = "../input_data/fielder_genome_data/{genome}.fasta",  
        gtf = "../input_data/fielder_genome_data/fielder.release.gtf"  
    output: directory("{outdir}/star_index_{genome}")
    threads: 16 
    log: "{outdir}/logs/star_index.{genome}.log"  
    shell:
        """
        source package /tgac/software/testing/bin/STAR-2.3.0;
        mkdir {output} ;
        STAR \
            --runThreadN {threads} \
            --runMode genomeGenerate \
            --genomeFastaFiles {input.fasta} \
            --sjdbGTFfile {input.gtf} \
            --sjdbOverhang 100 \
            --limitGenomeGenerateRAM 100111047092 \
            --genomeDir {output}        
        """



rule bowtie_index:
    params:
        basename="{outdir}/bowtie_index_{genome}"

    input: "../input_data/fielder_genome_data/{genome}.fasta"
    output: 
        multiext(
            "{outdir}/bowtie_index_{genome}.",
            "1.bt2l",
            "2.bt2l",
            "3.bt2l",
            "4.bt2l",
            "rev.1.bt2l",
            "rev.2.bt2l",
         )

    threads: 16
    log:  "{outdir}/logs/bowtie_index_{genome}.log"
    shell: r"""
    source package 29a74b59-88fc-4453-a30b-1310b34910b9 # bowtie2 2.4.1
    bowtie2-build {input} {params.basename} --threads={threads}
    """


rule bwa_index:
    output: 
        multiext(
            "{outdir}/bwa_index_{genome_stem}",
            ".amb",
            ".ann",
            ".bwt",
            ".pac",
            ".sa"), 
    input: "../input_data/fielder_genome_data/{genome}.fasta"
    threads: 16
    log:  "{outdir}/logs/bwa_index_{genome_stem}.log"
    shell:
        r"""
        source package fa33234e-dceb-4a58-9a78-7bcf9809edd7 # source package bwa version 0.7.27-r1188
        bwa index {input} -p {wildcards.outdir}/bwa_index_{wildcards.genome_stem}
        """

rule hisat_index:
    output: "{outdir}/hisat_index_{genome}"
    input:
        fasta = "../input_data/fielder_genome_data/{genome}.fasta",  
        gtf = "../input_data/fielder_genome_data/fielder.release.gtf"  
    threads: 16
    log: "{outdir}/logs/hisat_index_{genome}.log"
    shell:r""" source package f9c1e0c5-d0e8-4ba0-9edd-88235400fa13
        hisat2_extract_splice_sites.py {input.gtf} > {wildcards.outdir}/fielder.ss
        hisat2_extract_exons.py {input.gtf} > {wildcards.outdir}/fielder.exon
        hisat2-build -p {threads} --ss {wildcards.outdir}/fielder.ss --exon {wildcards.outdir}/fielder.exon {input.fasta} {output}
    """




# `# ALIGNING RULES 
# rule star_align:
#     output: directory("{outdir}/fielder_star_mapped_reads.{myfile}")
#     input:
#         star_index_directory: directory("{outdir}/fielder_star_index"),
#         read_1: "{outdir}/{myfile}.fq.gz", # Not sure if these should be named like this or something trim 
#         read_2: "{outdir}/{myfile}.fq.gz"
#     threads: 16
#     log: "{outdir}/logs/star_align.log"
#     shell: r"""
#     source package /tgac/software/testing/bin/STAR-2.3.0 # using version 2.3.0 as later versions seem to have bugs
#     STAR --runThreadN {threads} --genomeDir {input.star_index_directory} --readFilesIn {input.read_1} {input.read_2}
#      --readFilesCommand zcat --outFileNamePrefix {output} --outSAMtype BAM SortedByCoordinate --limitGenomeGenerateRAM 1001110470922 --limitBAMsortRAM 3000000000
#     """


# rule bowtie_align:
#     output: "{outdir}/bowtie_${myfile}.bam"
#     input:
#         bowtie_index: "{outdir}/fielder_bowtie_index.idx",
#         read_1:"{outdir}/{myfile}.fq.gz", # Not sure if these should be named like this or something trim 
#         read_2:"{outdir}/{myfile}.fq.gz"
#     threads: 16
#     log: "{outdir}/logs/bowtie_align.log"
#     shell: r""" 
#         source package 638df626-d658-40aa-80e5-14a275b7464b # source samtools 
#         source package 29a74b59-88fc-4453-a30b-1310b34910b9 # source bowtie2 2.4.1
#         bowtie2 -p {threads} -x {input.bowtie_index} -1  {input.read_1} -2 {input.read_2} | samtools view -bS > {output}
#         """

    

# rule bowtie_align_sensitive:
# output: "{outdir}/bowtie_sensitive_${myfile}.bam"
#     input:
#         bowtie_index: "{outdir}/fielder_bowtie_index.idx",
#         read_1:"{outdir}/{myfile}.fq.gz", # Not sure if these should be named like this or something trim 
#         read_2:"{outdir}/{myfile}.fq.gz"
#     threads: 16
#     log: "{outdir}/logs/bowtie_align_sensitive.log"
#     shell: r""" 
#         source package 638df626-d658-40aa-80e5-14a275b7464b # source samtools 
#         source package 29a74b59-88fc-4453-a30b-1310b34910b9 # source bowtie2 2.4.1
#         bowtie2 -p {threads} --met 1 --very-sensitive -x {input.bowtie_index} -1  {input.read_1} -2 {input.read_2} | samtools view -bS > {output}
#         """

# rule bwa_align:
#     output: "{outdir}/bwa_${myfile}.bam"
#     input:
#         bwa_index: "{outdir}/bwa_index.idx" 
#         read_1:"{outdir}/{myfile}.fq.gz", # Not sure if these should be named like this or something trim 
#         read_2:"{outdir}/{myfile}.fq.gz"
#     threads: 16
#     log: "{outdir}/logs/bowtie_align_sensitive.log"
#     shell: r""" 
#     source package 638df626-d658-40aa-80e5-14a275b7464b # source samtools 
#     source package fa33234e-dceb-4a58-9a78-7bcf9809edd7 # source package bwa version 0.7.27-r1188
#     bwa mem {input.bwa_index} {input.read_1} {input.read_2} | samtools view -bS > {output}
#     """

# rule hisat_align:
#     output: "{outdir}/{sample}.hisat.bam"
#     input: 
#         index = "{outdir}/hisat_fielder.idx", 
#         read_1 = "{outdir}/{sample}.trimmed.fastq.gz"
#         read_2 =  "{outdir}/{sample}.trimmed.fastq.gz"
#     threads: 16
#     log: "{outdir}/logs/hisat_align.log"
#     shell: r"""
#     source package f9c1e0c5-d0e8-4ba0-9edd-88235400fa13 # source hisat2 
#     source package 638df626-d658-40aa-80e5-14a275b7464b # source samtools 
#     hisat2 -x {input.index} -p {threads} -1 {input.read_1} -2 {input.read_1} | \
#     samtools view -bS > {outdir}/{sample}.hisat.bam
#     """


# rule alignment_statistics:
#     output: "{outdir}/{aligner}_{tissue}.txt"
#     input: "{outdir}/{aligner}_{tissue}.bam"
#     threads: 1
#     log: "{outdir}/logs/alignment_statistic.log"
#     shell: r"""
#     source package 9c36c962-3ae5-4f05-a17b-967eb76f9472 # source bamtools version 2.5.1
#     bamtools stats -in {input} > {output} # Not sureIcan do this with piping into output
#     """


# # rule report_all_alignments:
# #     output: "{outdir}/all_alignemnts_report.txt"
# #     # Maybe the input is the logs?
# #     # or create a rule that returns the statistics and then do this for all of them? 
# #     # bamtools stats -in bwa_${tissue}.bam
    
# #     input: 
# #         star: 
# #         bowtie: 
# #         bowtie_sensitive: 
# #         bwa: 
# #         hisat:
    
    